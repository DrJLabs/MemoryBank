# Cursor AI Rules for OpenMemory Direct API Integration

## Memory System Integration
Use the direct API integration for memory operations (MCP has compatibility issues):

### Memory Commands
Use the enhanced Python script `cursor-memory-enhanced.py` located in `/home/drj/*C-System/MemoryBank/mem0/openmemory/` for memory operations:

1. **Basic Commands:**
   ```bash
   python3 /home/drj/*C-System/MemoryBank/mem0/openmemory/cursor-memory-enhanced.py remember "information to store"
   python3 /home/drj/*C-System/MemoryBank/mem0/openmemory/cursor-memory-enhanced.py recall "search query"
   ```

2. **Enhanced Commands:**
   ```bash
   python3 /home/drj/*C-System/MemoryBank/mem0/openmemory/cursor-memory-enhanced.py analytics
   python3 /home/drj/*C-System/MemoryBank/mem0/openmemory/cursor-memory-enhanced.py learn "learning content"
   python3 /home/drj/*C-System/MemoryBank/mem0/openmemory/cursor-memory-enhanced.py preference "preference"
   python3 /home/drj/*C-System/MemoryBank/mem0/openmemory/cursor-memory-enhanced.py project-add "project info"
   python3 /home/drj/*C-System/MemoryBank/mem0/openmemory/cursor-memory-enhanced.py backup
   ```

### Available Aliases
```bash
mem-add "text"           # Add basic memory
mem-search "query"       # Search memories
mem-analytics           # Show analytics
mem-learn "content"     # Add learning memory
mem-preference "pref"   # Add preference memory
mem-project-add "info"  # Add project memory
mem-backup-now         # Create backup
mem-health            # Check system health
mem-ui               # Open dashboard
```

### Important Context
- Memory API running at: http://localhost:8765
- UI Dashboard: http://localhost:3010  
- User ID: "drj"
- Vector database: Qdrant at localhost:6333
- All memories stored locally with project context

### Memory Usage Guidelines
1. **Always search memories first** when answering questions about user preferences or past conversations
2. **Add new memories** when the user shares personal information, preferences, or important context
3. **Use categorization**: [LEARNING], [PREFERENCE], [PROJECT:name] tags
4. **Use semantic search** - the system understands context, not just keywords

### Example Workflow
When a user asks a question:
1. First, check analytics: `mem-analytics`
2. Search for relevant context: `mem-search "topic keywords"`
3. Use the retrieved context to provide personalized responses
4. If new important information is shared, categorize and add it:
   - `mem-learn "discovery or knowledge"`
   - `mem-preference "user preference"`
   - `mem-project-add "project-specific info"` 
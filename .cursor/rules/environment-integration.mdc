---
description: "USE FOR development environment setup, command usage, bash operations, project initialization, and when standard development commands are needed"
globs: 
alwaysApply: false
---
---
description: "USE FOR development environment setup, command usage, bash operations, project initialization, and when standard development commands are needed"
globs: 
alwaysApply: false
---

# Standard Development Environment Integration

## Standard Development Commands

### Core Command Usage
Use standard system commands for all operations:

| Command Type | Standard Command | Purpose |
|-------------|------------------|----------|
| Git Status | `git status` | Check repository status |
| Git Operations | `git` | All git operations |
| Python | `python3` or `python` | Python interpreter |
| Directory Creation | `mkdir -p dir && cd dir` | Create and navigate |
| Navigation | `cd` | Change directory |

### Project Context Commands
```bash
# Standard project information gathering
pwd                         # Current directory
ls -la                      # List files
git status                  # Git repository status
git log --oneline -10       # Recent commits
find . -name "package.json" # Find project files
find . -name "requirements.txt" # Find Python dependencies
```

### Date/Time Protocol
```bash
# Use standard date command
date                    # Full date/time
date +%Y-%m-%d         # YYYY-MM-DD format
date "+%Y-%m-%d %H:%M" # With time
```

## Standard Development Workflow

### Project Setup
1. **Navigate to project**: Use `cd /path/to/project`
2. **Check status**: Use `git status` and `ls -la`
3. **Understand structure**: Use `find` and `ls` commands
4. **Check dependencies**: Look for package.json, requirements.txt, etc.

### Standard Git Operations
```bash
git status                  # Check repository status
git add .                   # Stage changes
git commit -m "message"     # Commit changes
git push                    # Push to remote
git pull                    # Pull from remote
git branch                  # List branches
git checkout -b branch      # Create new branch
```

### Standard Development Tasks
```bash
# Python development
python3 -m venv venv        # Create virtual environment
source venv/bin/activate    # Activate virtual environment
python3 -m pip install -r requirements.txt  # Install dependencies
python3 script.py           # Run Python script

# Node.js development
npm install                 # Install dependencies
npm start                   # Start development server
npm test                    # Run tests
npm run build              # Build project

# Basic project analysis
find . -name "*.py" | wc -l # Count Python files
find . -name "*.js" | wc -l # Count JavaScript files
du -sh .                    # Directory size
```

## Environment Variables & Paths
- **User**: drj
- **Workspace**: /home/drj/C-System/Memory-C*
- **Shell**: /usr/bin/bash (standard configuration)

## Standard Rule Writing Guidelines

### When Writing Rules:
1. **Use standard commands** (git, python3, npm, etc.)
2. **Include full command paths** when necessary
3. **Use proper error checking** with standard bash patterns
4. **Reference system documentation** for command options

### Standard Command Patterns:
```bash
# Standard error checking
if [ -f "package.json" ]; then
    echo "Node.js project detected"
    npm install
elif [ -f "requirements.txt" ]; then
    echo "Python project detected"
    python3 -m pip install -r requirements.txt
fi

# Standard git workflow
git status
git add .
git commit -m "Update: $(date '+%Y-%m-%d %H:%M')"
git push
```

@core-development.mdc

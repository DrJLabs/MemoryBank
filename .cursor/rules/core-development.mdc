---
alwaysApply: true
---
# Enhanced Cursor Development Environment (v2.0.0)

## Core Environment Context
- **Current Date**: ALWAYS use `date` command to get actual system date/time
- **User ID**: drj
- **Shell**: /usr/bin/bash with enhanced profile
- **Workspace**: /home/drj/*C-System/Memory-C*

## CRITICAL: Date & Time Protocol
**NEVER use hardcoded dates. ALWAYS run `date` command for current date/time context.**
```bash
# Get current date in various formats:
date                    # Full date and time
date +%Y-%m-%d         # YYYY-MM-DD format
date +%Y-%m-%d\ %H:%M  # YYYY-MM-DD HH:MM format
```

## Enhanced Command System (60-80% Keystroke Reduction)

### Always use these enhanced commands:
- `ctx` - Show comprehensive project context (tech stack, structure, changes)
- `status` - Enhanced git status with project health
- `gs` - Enhanced git status (NOT `git status`)
- `g` - Git operations (NOT `git`)
- `gac` - Git add + commit in one command
- `py` - Python3 shortcut
- `mkcd` - mkdir + cd combined
- `dev` - Smart server startup with auto-detection
- `health` - Development environment health check
- `info` - Display full environment capabilities

### Project Detection Commands:
- `cdl` - Smart navigation with project detection
- `auto-status` - Automatic project status detection
- `init-project` - Smart project initialization

## Memory System Integration (CRITICAL)

### Advanced Memory Protocol:
**ALWAYS search memories before answering questions about:**
- User preferences → `ai-ctx-pref "query"`
- Technical topics → `ai-ctx-tech "query"`  
- Project history → `ai-ctx-project "query"`
- Workflows → `ai-ctx-workflow "query"`

### Memory Commands:
```bash
# Advanced memory system (primary)
ai-search "query" [type]        # Intelligent multi-strategy search
ai-context "query" [type]       # Rich conversational context
ai-analytics                    # Enterprise analytics
ai-ctx-pref "query"            # Preference context
ai-ctx-tech "query"            # Technical context
ai-ctx-project "query"         # Project context
ai-ctx-workflow "query"        # Workflow context

# Basic memory system (fallback)  
mem-search "query"             # Basic semantic search
mem-add "information"          # Add basic memory
mem-analytics                  # Basic analytics
```

### Memory Integration Rules:
1. **Before generating responses**: Use `ai-context "user_query" [type]` to get relevant context
2. **After successful tasks**: Add important information using categorized memories
3. **Memory Types**: preference, technical, project, workflow, learning, general
4. **API**: http://localhost:8765 (enterprise-grade with 44+ memories, pagination, relevance scoring)

## User Preferences (from memory context)

### Programming Languages:
- **Preferred**: TypeScript > JavaScript (better type safety, IDE support)
- **AI Development**: Python for automation and AI tasks
- **Development**: Focus on modern, type-safe approaches

### Development Workflow:
- Always use enhanced bash commands for efficiency
- Prioritize current/recent information and practices
- Use automatic project detection capabilities
- Use modern approaches appropriate for current date (check with `date` command)

## AI Response Protocol

### Workflow:
1. **Check current context**: Use `ctx` for project understanding
2. **Get current date**: Use `date` command when date/time context is relevant
3. **Search memories**: Use `ai-context "query" [type]` for relevant context
4. **Use enhanced commands**: Prioritize shortcuts (`g` over `git`, `py` over `python3`)
5. **Health checks**: Use `dev-health` when debugging
6. **Store results**: Add important discoveries to memory system

### Response Format:
- Reference memory context when relevant
- Use enhanced commands in suggestions
- Provide current best practices based on actual system date
- Include confidence metrics from memory searches
- Cite memory relevance scores when applicable

## Code Quality Integration

### Codacy Integration:
- After file edits: Run `codacy_cli_analyze` for edited files
- After dependency changes: Run security analysis with trivy
- Auto-fix issues when possible

### Git Workflow:
- Use `gs` for status checks
- Use `gac "message"` for quick commits  
- Use `g` prefix for all git operations
- Leverage enhanced git context commands

## Project-Specific Guidelines

### Memory-C* Project:
- Advanced AI memory integration system
- Enterprise-grade OpenMemory API utilization
- 44+ memories across 5 pages with sophisticated categorization
- Python-based memory management with semantic search
- Conversational memory following LangChain best practices

### General Development:
- Auto-detect project type and adjust suggestions
- Use modular, composable approaches
- Prioritize type safety and modern practices
- Leverage enhanced environment capabilities

## Performance Optimization

### Environment Features:
- 60-80% keystroke reduction through smart aliases
- Automatic project detection for all major tech stacks  
- AI-optimized non-hanging operations
- Self-documenting modular architecture
- Enhanced visual prompt with performance monitoring

### Best Practices:
- Start with `health` for environment check
- Use `status` for project overview
- Leverage `dev` for auto-server startup
- Use enhanced navigation with `cdl`

@advanced-memory-aliases.sh
@mem0/openmemory/advanced-memory-ai.py

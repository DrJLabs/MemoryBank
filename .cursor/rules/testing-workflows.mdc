---
description: "Enhanced testing workflows with TDD, memory integration, and quality assurance for comprehensive test coverage"
globs: ["**/*test*", "**/*spec*", "**/tests/**", "**/__tests__/**", "**/*.test.*", "**/*.spec.*", "**/cypress/**", "**/e2e/**", "jest.config.*", "pytest.ini", "tox.ini", "karma.conf.*", "vitest.config.*"]
alwaysApply: false
---

# Enhanced Testing Workflows

## Core Testing Commands (from @core-development.mdc)
- `py` - Python command (NOT `python3`)
- `ctx` - Project context detection
- `health` - Environment health check
- `dev` - Smart server startup

## Testing Protocol Framework

### 1. Pre-Testing Setup
```bash
# Enhanced testing environment preparation
ctx                                  # Project context detection
health                              # Environment health check
dev                                 # Start development services if needed

# Memory search for testing strategies
ai-ctx-tech "testing strategy [technology]"
ai-search "test setup patterns [framework]" technical
```

### 2. Technology-Specific Testing

#### Python Testing Workflows:
```bash
# Enhanced Python testing
py -m pytest                        # Run tests (NOT python3 -m pytest)
py -m pytest -v                     # Verbose output
py -m pytest --cov=src             # Coverage reporting
py -m pytest -x                     # Stop on first failure

# Memory integration for Python tests
ai-ctx-tech "python testing best practices"
ai-search "pytest configuration [project_type]" technical
```

#### JavaScript/Node.js Testing:
```bash
# Enhanced Node.js testing
npm test                            # Standard test runner
npm run test:watch                  # Watch mode
npm run test:coverage              # Coverage reporting
npm run test:e2e                   # End-to-end tests

# Memory search for JS testing patterns
ai-ctx-tech "javascript testing frameworks"
ai-search "jest configuration patterns" technical
```

#### TypeScript Testing:
```bash
# Enhanced TypeScript testing
npm run test:ts                     # TypeScript-specific tests
npm run type-check                 # Type checking
npm run test:unit                  # Unit tests
npm run test:integration           # Integration tests

# Memory integration for TypeScript
ai-ctx-tech "typescript testing strategies"
ai-search "type-safe testing patterns" technical
```

### 3. Memory-Enhanced Testing Patterns

#### Test Pattern Storage:
```bash
# Store effective testing patterns
ai-add "TESTING: Effective test pattern for [feature]: [pattern_description]" technical
ai-add "TEST SETUP: [framework] configuration that works: [config_details]" technical
ai-add "BUG TESTING: Reproduced [bug] using [test_method]" technical
```

#### Test Strategy Search:
```bash
# Before writing new tests
ai-ctx-tech "testing strategy [component_type]"
ai-search "test patterns [technology] [test_type]" technical
ai-ctx-project "existing test patterns"
```

### 4. Test-Driven Development (TDD) Workflows

#### TDD Cycle with Memory Integration:
```bash
# 1. Red - Write failing test
current_date=$(date +%Y-%m-%d)
ai-ctx-tech "TDD patterns [language]"

# 2. Green - Make test pass
py -m pytest test_new_feature.py   # Run specific test
# or
npm test new-feature.test.js       # JavaScript equivalent

# 3. Refactor - Improve code
ai-search "refactoring patterns [code_type]" technical

# 4. Document the cycle
ai-add "TDD CYCLE: $current_date - [feature] implemented using [approach]" workflow
```

### 5. Validation and Quality Assurance

#### Pre-Deployment Validation:
```bash
# Comprehensive validation workflow
gs                                   # Git status check (NOT git status)
health                              # Environment health
ctx                                 # Project context

# Run full test suite
py -m pytest --cov=. --cov-report=html  # Python with coverage
npm run test:all                         # JavaScript full suite

# Memory search for validation checklists
ai-ctx-workflow "deployment checklist [project_type]"
ai-search "pre-deployment validation" workflow
```

#### Quality Gates Integration:
```bash
# Enhanced quality gates (integrates with Codacy)
# Automatic quality checks run after file edits
# Security analysis runs after dependency changes

# Manual quality validation
ai-search "quality standards [technology]" technical
ai-ctx-tech "code quality metrics"
```

### 6. Test Data Management

#### Test Data Workflows:
```bash
# Enhanced test data management
current_date=$(date +%Y-%m-%d)

# Create test data snapshots
cp test_data.json "test_data_backup_$current_date.json"

# Memory search for test data patterns
ai-ctx-tech "test data management [database_type]"
ai-search "test fixtures patterns [framework]" technical
```

#### Mock and Stub Patterns:
```bash
# Memory-enhanced mocking strategies
ai-ctx-tech "mocking patterns [technology]"
ai-search "stub strategies [test_framework]" technical

# Store effective mocking patterns
ai-add "MOCKING: Effective [service] mock using [method]" technical
```

### 7. Performance Testing

#### Performance Test Workflows:
```bash
# Enhanced performance testing
py -m pytest --benchmark-only      # Python performance tests
npm run test:performance           # JavaScript performance

# Memory integration for performance
ai-ctx-tech "performance testing [technology]"
ai-search "performance benchmarks [project_type]" technical
ai-add "PERFORMANCE: [test] baseline: [metrics]" technical
```

### 8. Integration and E2E Testing

#### Integration Test Patterns:
```bash
# Enhanced integration testing
dev                                 # Start all services
health                             # Verify services are healthy

# Run integration tests
py -m pytest tests/integration/    # Python integration
npm run test:integration          # JavaScript integration

# Memory search for integration patterns
ai-ctx-tech "integration testing [architecture]"
ai-search "service integration patterns" technical
```

#### End-to-End Testing:
```bash
# Enhanced E2E testing workflow
dev                                # Start development environment
curl http://localhost:8765/health  # Verify API health

# Run E2E tests
npm run test:e2e                  # Browser-based E2E
py -m pytest tests/e2e/          # API E2E tests

# Store E2E insights
ai-add "E2E SUCCESS: [workflow] tested end-to-end using [tools]" technical
```

### 9. Test Debugging and Troubleshooting

#### Test Failure Analysis:
```bash
# Enhanced test debugging
py -m pytest -vvv --tb=long       # Verbose failure output
py -m pytest --lf                 # Last failed tests only
py -m pytest -k "test_specific"   # Run specific test

# Memory search for debugging patterns
ai-ctx-tech "test debugging [framework]"
ai-search "test failure patterns [error_type]" technical
```

#### Test Environment Issues:
```bash
# Test environment troubleshooting
health                             # Overall environment health
dev-health                        # Development-specific health
ctx                               # Project context

# Memory search for environment issues
ai-ctx-tech "test environment debugging"
ai-search "testing setup issues [technology]" technical
```

### 10. Continuous Integration Testing

#### CI/CD Integration:
```bash
# Enhanced CI testing patterns
# (Integrates with git workflows and Codacy)

# Before pushing to CI
gs                                 # Check git status
py -m pytest                      # Local test run
gac "test: add tests for [feature]"  # Commit with test changes

# Memory search for CI patterns
ai-ctx-workflow "CI testing strategies"
ai-search "continuous integration [platform]" workflow
```

## Integration with Other Systems

### Memory System Integration:
- **Before testing**: Search for similar test patterns and strategies
- **During testing**: Use context from previous test experiences
- **After testing**: Store successful patterns and debugging solutions

### Codacy Integration:
- **Automatic analysis** of test files when edited
- **Quality gates** for test coverage and code quality
- **Security scanning** for test dependencies

### Git Workflow Integration:
- **Test before commits** using enhanced git commands
- **Branch-specific testing** with memory-enhanced strategies
- **Test result documentation** in commit messages

### Enhanced Environment:
- **Always use enhanced commands** (`py`, `gs`, `ctx`, `health`)
- **Leverage project detection** for technology-specific testing
- **Use date commands** for timestamped test documentation

@core-development.mdc
@git-workflows.mdc
@debugging-troubleshooting.mdc
@memory-integration.mdc

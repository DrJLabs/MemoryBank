---
globs: ["**/*.ts", "**/*.tsx", "**/tsconfig.json", "**/next.config.*", "**/package.json", "**/*.jsx", "**/*.js"]
alwaysApply: false
---
# TypeScript & React Development Standards

## TypeScript Configuration

### Strict Type Safety (Required)
- Always use `strict: true` in tsconfig.json
- Prefer `interface` over `type` for object shapes
- Use generic constraints for better type inference
- Implement proper error boundaries with typed errors

### Component Patterns
```typescript
// Preferred component structure
interface ComponentProps {
  // Required props first
  data: ApiResponse<UserData>;
  onSubmit: (values: FormData) => Promise<void>;
  
  // Optional props with defaults
  className?: string;
  variant?: 'primary' | 'secondary';
  disabled?: boolean;
}

// Use React.FC for consistency
export const Component: React.FC<ComponentProps> = ({
  data,
  onSubmit,
  className = '',
  variant = 'primary',
  disabled = false
}) => {
  // Implementation
};
```

### API Integration Patterns
```typescript
// Type-safe API responses
interface ApiResponse<T> {
  data: T;
  status: 'success' | 'error';
  message?: string;
  timestamp: string;
}

// Error handling with discriminated unions
type Result<T, E = Error> = 
  | { success: true; data: T }
  | { success: false; error: E };

// Async operations with proper error handling
async function safeApiCall<T>(
  operation: () => Promise<T>
): Promise<Result<T>> {
  try {
    const data = await operation();
    return { success: true, data };
  } catch (error) {
    return { success: false, error: error as Error };
  }
}
```

## React Patterns

### Next.js 15 App Router (Required)
- Use App Router (`app/` directory) for all new routes
- Implement proper loading and error boundaries
- Use Server Components by default, Client Components only when needed
- Leverage Next.js 15 caching strategies

### Component Organization
```
components/
  ui/           # Reusable UI components (Radix UI based)
  forms/        # Form components with react-hook-form
  layout/       # Layout components
  feature/      # Feature-specific components
```

### State Management
- Use `useState` for local component state
- Use Redux Toolkit for complex global state
- Implement proper state normalization for API data
- Use React Query/TanStack Query for server state

### Form Handling (react-hook-form + zod)
```typescript
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';

const FormSchema = z.object({
  email: z.string().email('Invalid email address'),
  password: z.string().min(8, 'Password must be at least 8 characters'),
});

type FormData = z.infer<typeof FormSchema>;

export const LoginForm: React.FC = () => {
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting }
  } = useForm<FormData>({
    resolver: zodResolver(FormSchema)
  });

  const onSubmit = async (data: FormData) => {
    // Type-safe form submission
  };
  
  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      {/* Form fields */}
    </form>
  );
};
```

## Styling Standards

### Tailwind CSS + Radix UI Integration
- Use Tailwind for utility-first styling
- Leverage Radix UI components for accessibility
- Use `clsx` for conditional class names
- Implement consistent design tokens

### Component Styling Pattern
```typescript
import { clsx } from 'clsx';
import { VariantProps, cva } from 'class-variance-authority';

const buttonVariants = cva(
  'inline-flex items-center justify-center rounded-md font-medium transition-colors',
  {
    variants: {
      variant: {
        primary: 'bg-blue-600 text-white hover:bg-blue-700',
        secondary: 'bg-gray-200 text-gray-900 hover:bg-gray-300',
      },
      size: {
        sm: 'h-8 px-3 text-sm',
        md: 'h-10 px-4',
        lg: 'h-12 px-6 text-lg',
      },
    },
    defaultVariants: {
      variant: 'primary',
      size: 'md',
    },
  }
);

interface ButtonProps 
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {}

export const Button: React.FC<ButtonProps> = ({
  className,
  variant,
  size,
  ...props
}) => {
  return (
    <button
      className={clsx(buttonVariants({ variant, size }), className)}
      {...props}
    />
  );
};
```

## Performance Optimization

### React Performance
- Use `React.memo` for expensive components
- Implement proper dependency arrays in useEffect
- Use `useMemo` and `useCallback` judiciously
- Avoid inline object/function creation in JSX

### Next.js Optimization
- Use `next/image` for optimized images
- Implement proper code splitting with `React.lazy`
- Leverage Next.js 15 caching and ISR features
- Use `next/font` for font optimization

### Bundle Optimization
```typescript
// Dynamic imports for code splitting
const HeavyComponent = React.lazy(() => 
  import('./HeavyComponent').then(module => ({
    default: module.HeavyComponent
  }))
);

// Wrap in Suspense
<Suspense fallback={<LoadingSpinner />}>
  <HeavyComponent />
</Suspense>
```

## Testing Standards

### Unit Testing (Jest + React Testing Library)
```typescript
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Component } from './Component';

describe('Component', () => {
  it('should handle user interaction', async () => {
    const mockOnSubmit = jest.fn();
    
    render(<Component onSubmit={mockOnSubmit} />);
    
    const button = screen.getByRole('button', { name: /submit/i });
    fireEvent.click(button);
    
    await waitFor(() => {
      expect(mockOnSubmit).toHaveBeenCalledWith(expectedData);
    });
  });
});
```

## Error Handling

### Error Boundaries
```typescript
interface ErrorBoundaryState {
  hasError: boolean;
  error?: Error;
}

export class ErrorBoundary extends React.Component<
  React.PropsWithChildren<{}>,
  ErrorBoundaryState
> {
  constructor(props: React.PropsWithChildren<{}>) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error): ErrorBoundaryState {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error('Error caught by boundary:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return <ErrorFallback error={this.state.error} />;
    }

    return this.props.children;
  }
}
```

## Accessibility Standards

### ARIA and Semantic HTML
- Use semantic HTML elements (`<main>`, `<nav>`, `<section>`)
- Implement proper ARIA labels and roles
- Ensure keyboard navigation works properly
- Test with screen readers

### Radix UI Integration
- Leverage Radix UI's built-in accessibility features
- Use compound components for complex interactions
- Implement proper focus management

@core-development.mdc
@context7-documentation.mdc
@development-templates.mdc

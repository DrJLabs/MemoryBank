---
description: "Enhanced git workflows with memory integration for version control, branching, merging, and repository management"
globs: [".gitignore", ".gitmodules", ".gitattributes", "**/.github/**", "**/CHANGELOG*", "**/HISTORY*", "**/*merge*", "**/*conflict*", "package.json", "requirements.txt"]
alwaysApply: false
---

# Enhanced Git Workflows

## Core Git Commands (from @core-development.mdc)
- `g` - Git operations (NOT `git`)
- `gs` - Enhanced git status (NOT `git status`)
- `gac` - Git add + commit in one command

## Daily Git Workflow Patterns

### 1. Standard Development Workflow
```bash
# Start of day workflow
gs                              # Check current status
g pull origin main             # Update from remote
g checkout -b feature/new-work # Create feature branch

# During development
gs                              # Check status frequently
gac "feature: add new functionality"  # Add and commit
g push origin feature/new-work  # Push to remote

# End of development
gs                              # Final status check
g checkout main                # Switch to main
g pull origin main             # Update main
g merge feature/new-work       # Merge feature
g push origin main             # Push updated main
```

### 2. Memory-Enhanced Git Workflows

#### Search for Git Best Practices:
```bash
# Before starting complex git operations
ai-ctx-workflow "git best practices"
ai-search "branching strategy [project_type]" workflow
ai-search "git conflict resolution" technical
```

#### Store Effective Git Patterns:
```bash
# After successful complex operations
ai-add "GIT WORKFLOW: Effective pattern for [operation]: [description]" workflow
ai-add "GIT SOLUTION: Fixed [issue] using [commands]" technical
```

### 3. Branch Management Patterns

#### Feature Branch Workflow:
```bash
# Enhanced feature branch creation
current_date=$(date +%Y-%m-%d)
feature_name="feature/${current_date}-description"

gs                              # Check clean state
g checkout main                # Ensure on main
g pull origin main             # Update main
g checkout -b $feature_name    # Create feature branch

# Memory search for feature patterns
ai-ctx-project "feature development patterns"
ai-search "feature branch naming" workflow
```

#### Release Branch Management:
```bash
# Release preparation workflow
release_version="v$(date +%Y.%m.%d)"

gs                              # Check status
g checkout main                # Switch to main
g pull origin main             # Update main
g checkout -b "release/$release_version"  # Create release branch

# Memory search for release processes
ai-ctx-workflow "release preparation checklist"
ai-search "version tagging strategy" project
```

### 4. Conflict Resolution Workflows

#### Merge Conflict Resolution:
```bash
# Enhanced conflict resolution
gs                              # Check conflict status
g status --porcelain           # Machine-readable status

# Memory search for conflict patterns
ai-ctx-tech "merge conflict resolution [file_type]"
ai-search "conflict resolution strategies" technical

# After resolution
gac "resolve: merge conflict in [files]"
ai-add "CONFLICT RESOLVED: [conflict_type] in [files] using [method]" technical
```

#### Rebase Conflict Management:
```bash
# Interactive rebase workflow
g rebase -i HEAD~n             # Start interactive rebase
# Handle conflicts as they arise
g add .                        # Stage resolved files
g rebase --continue            # Continue rebase

# Store successful rebase patterns
ai-add "REBASE SUCCESS: [operation] completed using [strategy]" workflow
```

### 5. Advanced Git Operations

#### Cherry-pick Workflows:
```bash
# Enhanced cherry-picking
target_commit="commit_hash"
gs                              # Check clean state

g cherry-pick $target_commit   # Apply specific commit
# Handle conflicts if any
gac "cherry-pick: $target_commit - [description]"

# Memory integration
ai-add "CHERRY-PICK: Successfully applied $target_commit for [reason]" workflow
```

#### Stash Management:
```bash
# Enhanced stash operations
g stash push -m "WIP: $(date +%Y-%m-%d) - [description]"  # Stash with timestamp
g stash list                   # List all stashes
g stash pop stash@{0}         # Apply most recent stash

# Memory search for stash strategies
ai-ctx-workflow "git stash best practices"
```

### 6. Repository Maintenance

#### Cleanup Operations:
```bash
# Repository maintenance workflow
g fetch --prune               # Remove dead remote references
g branch --merged main | grep -v main | xargs g branch -d  # Clean merged branches
g gc --aggressive             # Garbage collection

# Memory search for maintenance patterns
ai-ctx-workflow "git repository maintenance"
ai-search "git cleanup strategies" technical
```

#### Remote Management:
```bash
# Enhanced remote operations
g remote -v                   # List remotes
g remote prune origin        # Clean remote references
g fetch --all --prune        # Update all remotes

# Store remote management patterns
ai-add "REMOTE SETUP: [remote_name] configured for [purpose]" project
```

### 7. Git Hooks and Automation

#### Pre-commit Hook Integration:
```bash
# Enhanced pre-commit workflow
# (Integrates with Codacy rules for automatic analysis)

# Before commit (automatic via Codacy)
# - Code quality analysis runs
# - Security scans execute
# - Formatting checks applied

gac "feat: implement [feature] with quality checks"
```

#### Commit Message Standards:
```bash
# Enhanced commit message patterns
# feat: new feature
# fix: bug fix  
# docs: documentation
# style: formatting
# refactor: code restructuring
# test: adding tests
# chore: maintenance

# Memory search for commit standards
ai-ctx-workflow "commit message standards [project]"
```

### 8. Git Analytics and Reporting

#### Repository Analysis:
```bash
# Enhanced git analytics
g log --oneline --graph -10   # Visual commit history
g log --author="[name]" --since="1 week ago"  # Author contributions
g shortlog -sn                # Contribution summary

# Memory integration for analytics
ai-add "GIT ANALYTICS: [insight] discovered in repository analysis" project
```

#### Performance Monitoring:
```bash
# Git performance analysis
g count-objects -vH           # Repository size analysis
g for-each-ref --format='%(refname:short) %(committerdate)' --sort=-committerdate  # Branch activity

# Store performance insights
ai-ctx-tech "git performance optimization"
```

## Integration with Other Systems

### Memory System Integration:
- **Before complex operations**: Search memories for similar patterns
- **During operations**: Use context from previous experiences
- **After operations**: Store successful patterns for future reference

### Codacy Integration:
- **Automatic analysis** after file edits via git commits
- **Security scanning** for dependency changes
- **Quality gates** integrated into git workflow

### Enhanced Environment:
- **Always use enhanced commands** (`g`, `gs`, `gac`)
- **Leverage `ctx`** for project-aware git operations
- **Use `date` command** for timestamped operations

@core-development.mdc
@workflow-automation.mdc
@memory-integration.mdc

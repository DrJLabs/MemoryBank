---
description: "USE FOR project management, task planning, GitHub integration, development tracking, issue creation, progress reporting, and solo development workflow management"
globs: 
alwaysApply: false
---

---
alwaysApply: true
---
# GitHub Projects Integration Protocol for Memory-C*

# GitHub Projects Integration Protocol for Memory-C*

## CRITICAL: GitHub Projects as Primary Project Management

### Mandatory GitHub Projects Usage
**You MUST use GitHub Projects for ALL project management activities:**
- Issue creation and tracking via GitHub Issues API
- Project milestone management via GitHub Projects API  
- Progress reporting and updates via GraphQL API
- Sprint/cycle planning via automated workflows
- Team coordination and task assignment
- Development roadmap planning using project boards

### When to Use GitHub Projects Integration (MANDATORY)

#### Project Management Activities:
**ALWAYS use GitHub Projects when:**
- User mentions bugs, features, tasks, or issues
- Planning development work or sprints
- Tracking progress on projects  
- Managing solo development workflow
- Creating project roadmaps or milestones
- Discussing project status or updates

#### Automatic GitHub Integration:
**For ANY development task, you MUST:**
1. Create GitHub issues for significant work items
2. Link work to existing projects using GraphQL API
3. Update progress via issue comments and status changes
4. Store insights in Memory-C* system with GitHub references
5. Use GitHub Actions for automated workflows

### Available GitHub Projects Tools & APIs

#### Core Issue Management (GitHub Issues API):
- **REST API**: Create, update, list, and manage issues
- **GraphQL API**: Advanced querying and bulk operations
- **GitHub CLI**: Command-line integration with `gh` commands

#### Project Management (GitHub Projects v2 API):
- **GraphQL API**: Full project board manipulation
- **Automated workflows**: GitHub Actions integration
- **Field management**: Custom fields, priorities, status tracking
- **View configuration**: Kanban, table, and roadmap views

#### Team Coordination:
- **Repository management**: Via GitHub API
- **Workflow automation**: GitHub Actions for CI/CD
- **Integration hooks**: Webhooks for real-time updates
- **Branch management**: Automated branch creation from issues

### Integration Architecture

#### Core Components:
```bash
# 1. GitHub Projects Integration Service
mem0/openmemory/github-projects-integration.py

# 2. Startup Script with Health Checks  
mem0/openmemory/start-github-projects.sh

# 3. GitHub Actions Workflow
.github/workflows/memory-projects-sync.yml

# 4. Memory-C* API Integration
Direct API calls to http://localhost:8765
```

#### Service Architecture:
- **GitHubProjectsAPI**: GraphQL client for project operations
- **MemoryProjectsSync**: Bidirectional sync service
- **GitHubProjectsService**: Main orchestrator with async operations
- **GitHub Actions**: Automated CI/CD workflows

### Environment Configuration

#### Required Environment Variables:
```bash
export GITHUB_TOKEN=your_personal_access_token
export GITHUB_ORG=DrJLabs  
export GITHUB_REPO=MemoryBank
export GITHUB_PROJECT_NUMBER=1
```

#### GitHub Token Permissions Required:
- `repo` - Full repository access
- `project` - GitHub Projects access  
- `write:org` - Organization-level operations
- `workflow` - GitHub Actions management

### Memory-C* Integration Rules

#### Before GitHub Operations:
```bash
# Search for relevant context
ai-ctx-project "github_task_description"
ai-ctx-workflow "project_management_patterns"
ai-search "similar_github_issues" project
```

#### After GitHub Operations:
```bash
# Store successful patterns
ai-add "GITHUB: Created issue #X for [task] using [approach]" project
ai-add "WORKFLOW: Effective GitHub Projects pattern: [description]" workflow
ai-add "INTEGRATION: GitHub API success: [endpoint] [result]" technical
```

### GitHub Issue Standards

#### Issue Creation Requirements:
- **Clear titles**: Use format "[Type] [What] [Context]"
  - `üêõ Fix: Authentication error in production`
  - `‚ú® Feature: Add real-time memory insights sync`
  - `‚ö° Optimize: Database query performance`

- **Detailed descriptions**: Include objectives, tasks, and success criteria
- **Proper labeling**: Use memory-insight, performance, security, enhancement labels
- **Project linking**: Automatically add to Memory-C* Development project
- **Memory references**: Include Memory-C* insight IDs when applicable

#### Project Organization:
- **Memory-C* Development**: Main development project (Project #1)
- **Issue prefixes**: Use repository naming for tracking
- **Milestone tracking**: Link issues to project milestones  
- **Status automation**: Use GitHub Actions for status updates

### Automation Workflows

#### GitHub Actions Integration:
```yaml
# Automated sync every 30 minutes during work hours
schedule: '*/30 9-18 * * 1-5'

# Triggered on Memory-C* changes
paths: ['mem0/openmemory/**']

# Manual trigger with force sync option
workflow_dispatch: enabled
```

#### Memory Insight Processing:
1. **Detect actionable insights** containing: bug, error, performance, optimization
2. **Create GitHub issues** with Memory-C* context
3. **Add to project board** with appropriate fields
4. **Set priority and labels** based on content analysis
5. **Store bidirectional mapping** in Memory-C* system

### Service Operations

#### Starting the Integration:
```bash
# Health check and setup
cd mem0/openmemory
./start-github-projects.sh --health

# Test connection
./start-github-projects.sh --test  

# Run one-time sync
./start-github-projects.sh --sync-once

# Start continuous service
./start-github-projects.sh
```

#### Service Features:
- **Health monitoring**: API connection and dependency checks
- **Error handling**: Graceful failure recovery  
- **Logging**: Comprehensive operation logging
- **Rate limiting**: Respect GitHub API rate limits
- **Async operations**: Non-blocking service architecture

### Performance Optimizations

#### GitHub API Efficiency:
- **GraphQL batching**: Multiple operations in single requests
- **Rate limit awareness**: Built-in throttling and backoff
- **Caching**: Local caching of project metadata
- **Parallel operations**: Concurrent API calls where possible

#### Memory Integration:
- **Smart filtering**: Only process actionable insights
- **Deduplication**: Avoid creating duplicate issues
- **Context enrichment**: Add Memory-C* context to all issues
- **Bidirectional sync**: GitHub changes update Memory-C*

### Quality Assurance

#### Must Do:
- Create GitHub issues for all significant development work
- Update issue status when work progresses  
- Link related work to Memory-C* Development project
- Store GitHub insights in Memory-C* system
- Use standardized issue formats and automation

#### Must Not:
- Skip GitHub tracking for development tasks
- Create duplicate issues without checking existing ones
- Leave issues without proper status updates
- Ignore project organization and automation
- Forget to integrate with Memory-C* system

### Integration Checklist

Before completing any development task:
- [ ] GitHub issue exists and is properly categorized
- [ ] Issue is linked to Memory-C* Development project  
- [ ] Status reflects current progress
- [ ] Comments document key decisions/blockers
- [ ] Memory-C* system has relevant context stored
- [ ] GitHub Actions workflows are functioning
- [ ] API integration is healthy and responsive

### Troubleshooting

#### Common Issues:
- **Token permissions**: Verify all required scopes enabled
- **Project access**: Ensure project exists and is accessible
- **API rate limits**: Monitor usage and implement backoff
- **Memory-C* connectivity**: Verify local API is running
- **Workflow failures**: Check GitHub Actions logs

#### Health Checks:
```bash
# Complete system health
./start-github-projects.sh --health

# GitHub API connectivity  
gh api user

# Memory-C* API status
curl http://localhost:8765/health

# Project accessibility
gh project list --owner DrJLabs
```

## Rule Enforcement

This rule has `alwaysApply: false` - GitHub Projects integration is MANDATORY for:
- Any development or project management discussion
- Task planning and tracking
- Progress reporting and updates  
- Solo development workflow management
- Memory-C* insight processing

Failure to use GitHub Projects for project management is considered a critical workflow violation.

@github-projects-integration
@memory-first-development.mdc  
@environment-integration.mdc

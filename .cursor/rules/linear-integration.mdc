---
alwaysApply: true
---
# Linear Project Management Integration Protocol

## CRITICAL: Linear as Primary Progress Tracking System

### Mandatory Linear Usage
**You MUST use Linear MCP for ALL project management activities:**
- Issue creation and tracking
- Project milestone management
- Progress reporting and updates
- Sprint/cycle planning
- Team coordination and task assignment
- Development roadmap planning

### When to Use Linear MCP (MANDATORY)

#### Project Management Activities:
**ALWAYS use Linear MCP when:**
- User mentions bugs, features, tasks, or issues
- Planning development work or sprints
- Tracking progress on projects
- Managing team workload and assignments
- Creating project roadmaps or milestones
- Discussing project status or updates

#### Automatic Linear Integration:
**For ANY development task, you MUST:**
1. Check existing Linear issues for context
2. Create/update Linear issues as appropriate
3. Link work to existing projects
4. Update progress and status
5. Store insights in Memory-C* system

### Available Linear MCP Tools

#### Core Issue Management:
- `mcp_Linear_create_issue`: Create new issues with descriptions, priorities, labels
- `mcp_Linear_update_issue`: Update existing issue status, descriptions, assignments
- `mcp_Linear_get_issue`: Retrieve detailed issue information
- `mcp_Linear_list_issues`: Search and filter issues by various criteria
- `mcp_Linear_list_my_issues`: Get user's assigned issues

#### Project Management:
- `mcp_Linear_create_project`: Create new projects with milestones and descriptions
- `mcp_Linear_update_project`: Update project details and status
- `mcp_Linear_get_project`: Retrieve project information
- `mcp_Linear_list_projects`: Browse all projects with filtering

#### Team Coordination:
- `mcp_Linear_list_teams`: Get available teams
- `mcp_Linear_get_team`: Retrieve team details
- `mcp_Linear_list_users`: Get team members
- `mcp_Linear_list_issue_statuses`: Available workflow states
- `mcp_Linear_list_issue_labels`: Categorization options

#### Communication:
- `mcp_Linear_create_comment`: Add comments to issues
- `mcp_Linear_list_comments`: Retrieve issue discussions

### Integration Workflow Protocol

#### For Development Tasks:
```bash
1. Search existing issues: mcp_Linear_list_issues
2. Create/update as needed: mcp_Linear_create_issue or mcp_Linear_update_issue
3. Link to Memory-C* context: ai-add-adv with Linear references
4. Update progress regularly: mcp_Linear_update_issue
5. Store learnings: ai-add-adv with PROJECT category
```

#### For Project Planning:
```bash
1. Check current projects: mcp_Linear_list_projects
2. Create project if needed: mcp_Linear_create_project
3. Break into issues: mcp_Linear_create_issue with projectId
4. Store planning context: ai-ctx-project for future reference
```

#### For Progress Tracking:
```bash
1. Review assigned work: mcp_Linear_list_my_issues
2. Update issue status: mcp_Linear_update_issue
3. Add progress comments: mcp_Linear_create_comment
4. Store insights: ai-add-adv with WORKFLOW category
```

### Memory-C* Integration Rules

#### Before Using Linear:
```bash
# Search for relevant context
ai-ctx-project "current_task_description"
ai-ctx-workflow "similar_work_patterns"
```

#### After Linear Operations:
```bash
# Store successful patterns
ai-add-adv "LINEAR: Created issue [DRJ-X] for [task] using [approach]" 
ai-add-adv "WORKFLOW: Effective Linear pattern: [description]"
```

### Linear Issue Standards

#### Issue Creation Requirements:
- **Clear titles**: Use format "[Type] [What] [Context]"
  - `Fix: Login authentication error in production`
  - `Feature: Add real-time notifications system`
  - `Refactor: Optimize database query performance`

- **Detailed descriptions**: Include objectives, tasks, and success criteria
- **Proper categorization**: Use appropriate labels and project links
- **Priority assignment**: Set based on impact and urgency
- **Team assignment**: Assign to appropriate team members

#### Project Organization:
- **Memory-C* Development**: Main development project (ID: 655dcbd5-afe9-4747-9a15-03fb34f8dbfb)
- **Issue prefixes**: Use team identifier (DRJ-) for tracking
- **Milestone tracking**: Link issues to project milestones
- **Status updates**: Regular progress updates via comments

### Enforcement Rules

#### MUST DO:
- Create Linear issues for all significant development work
- Update issue status when work progresses
- Link related work to existing projects
- Store Linear insights in Memory-C* system
- Use standardized issue formats and descriptions

#### MUST NOT:
- Skip Linear tracking for development tasks
- Create duplicate issues without checking existing ones
- Leave issues without proper status updates
- Ignore project organization and categorization
- Forget to integrate with Memory-C* system

### Quality Assurance Checklist

Before completing any development task:
- [ ] Linear issue exists and is properly categorized
- [ ] Issue is linked to appropriate project
- [ ] Status is updated to reflect current progress
- [ ] Comments document key decisions/blockers
- [ ] Memory-C* system has relevant context stored
- [ ] Team members are properly assigned/notified

### Integration with Memory System

#### Memory Categories for Linear Work:
- **PROJECT**: Linear project planning and organization insights
- **WORKFLOW**: Effective Linear usage patterns and processes
- **TECHNICAL**: Development task tracking and solutions
- **LEARNING**: Insights gained from Linear-managed work

#### Search Patterns:
- Use `ai-ctx-project` for project context before Linear operations
- Use `ai-ctx-workflow` for process improvements
- Store successful Linear patterns for future reference

### Performance Optimization

#### Efficient Linear Usage:
- Batch similar operations (create multiple issues together)
- Use filters effectively for issue searches
- Leverage project organization for better tracking
- Regular cleanup of completed/obsolete issues

#### Memory Integration:
- Search memory before creating new issues (avoid duplicates)
- Store successful Linear patterns for reuse
- Build institutional knowledge around project management
- Track metrics on Linear usage effectiveness

## Rule Enforcement

This rule has `alwaysApply: true` - Linear integration is MANDATORY for:
- Any development or project management discussion
- Task planning and tracking
- Progress reporting and updates
- Team coordination activities
- Project roadmap planning

Failure to use Linear MCP for project management is considered a critical workflow violation.

@linear-mcp-integration
@memory-first-development.mdc
@environment-integration.mdc

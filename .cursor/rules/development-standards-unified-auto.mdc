---
description:
globs:
alwaysApply: false
---
# Development Standards & Templates

## 🔧 Standards
- **TypeScript** over JavaScript • **Python 3** for automation • **Error handling** required • Use `date` command

## 📝 Commands
```bash
pwd && ls -la && git status && date
git add . && git commit -m "feat: $(date '+%Y-%m-%d %H:%M') - description"
find . -name "package.json" -o -name "requirements.txt"  # Project detection
```

## 🎯 TypeScript Template
```typescript
interface ApiResponse<T> { data: T; status: 'success' | 'error'; }

async function safeOperation<T>(op: () => Promise<T>): Promise<Result<T>> {
  try {
    return { success: true, data: await op() };
  } catch (error) {
    return { success: false, error: error as Error };
  }
}
```

## 🐍 Python Template  
```python
#!/usr/bin/env python3
from typing import Dict, Any

def safe_operation(operation) -> Dict[str, Any]:
    try:
        return {"status": "success", "data": operation()}
    except Exception as e:
        return {"status": "error", "error": str(e)}
```

## ✅ Valid Example
```typescript
async function fetchData<T>(url: string): Promise<ApiResponse<T>> {
  try {
    const response = await fetch(url);
    return { data: await response.json(), status: 'success' };
  } catch (error) {
    return { data: null as any, status: 'error' };
  }
}
```

## ❌ Invalid Example
```javascript
// JavaScript without types/error handling - WRONG!
function fetchData(url) { return fetch(url).then(r => r.json()); }
```

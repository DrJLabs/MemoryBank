---
globs: "**/.cursor/rules/*.mdc","**/*.mdc"
alwaysApply: false
---

# Cursor Rule Authoring Protocol (v2025.06c)

This protocol is the canonical guide for creating and maintaining rules in this project. Adhering to it prevents parsing errors and ensures optimal context usage.

## 1. CRITICAL: The Front-Matter Workflow

**Problem:** Cursor's AI can struggle to read and understand the YAML front-matter of a `.mdc` file directly. Attempting to analyze or edit the front-matter *before* following this workflow will lead to parsing errors and bad decisions.

**Solution:** You **must first** move the rule file to a temporary location and rename it to `.md`. This action allows Cursor to see it as a standard Markdown file, enabling correct front-matter parsing. **Only then** can you safely examine or edit the header.

### The Mandatory Workflow for Header Edits

* **Applies to:** Creating a new rule OR modifying the front-matter of an existing rule.
* **Purpose:** To ensure Cursor can correctly read the rule's header.

# 1. Define your rule name
RULE_NAME="my-new-rule"

# 2. !! FIRST, execute the move-and-rename operation !!
work="/tmp/cursor-rules-work"
rule_path=".cursor/rules/$RULE_NAME.mdc"
mkdir -p "$work"
touch "$rule_path"      # Create an empty file if it's new
cp "$rule_path" "$work"
cd "$work"
mv "$RULE_NAME.mdc" "$RULE_NAME.md"

# 3. THEN, examine and edit the file in your editor
# At this stage, Cursor can correctly see the front-matter.
${EDITOR:-nano} "$RULE_NAME.md"

# 4. FINALLY, sanitize and move the file back
sed -i '1s/^\xEF\xBB\xBF//' "$RULE_NAME.md" && sed -i 's/\r$//' "$RULE_NAME.md"
mv "$RULE_NAME.md" "$RULE_NAME.mdc"
cp "$RULE_NAME.mdc" "$OLDPWD/$rule_path"
rm -rf "$work"
cd "$OLDPWD"

You can skip this entire workflow ONLY when editing the body of a rule whose front-matter is already correct and requires no changes.

## 2. Choose Your Rule Type

After performing the workflow above, ensure the front-matter conforms to one of these three types.  When `alwaysApply` is `false`, you **must** choose **either** a `description` **or** `globs`, but not both.

### Type A: Agent-Selected Rule

The AI decides when to apply it.  Use `description` for this type.

---
description: "A 10-20 word, action-oriented summary for the AI."
alwaysApply: false
---

### Type B: Automatic Rule (via File Path)

Applies automatically when a matching file is in context.  Use `globs` for this type.

---
globs: ["**/components/**/*.tsx"]
alwaysApply: false
---

### Type C: Global Rule (Always On)

Always active. Use sparingly.  This type does not use `globs` or `description`.

---
alwaysApply: true
---

## 3. Quality & Syntax Checklist

Before committing, verify the following:

* [ ] Workflow Adhered To: Was the file renamed to .md before its front-matter was edited?
* [ ] Correct Type: The front-matter uses exactly one of the three patterns above.
* [ ] Exclusive Properties: When `alwaysApply` is `false`, the front-matter contains **either** `description` **or** `globs`, but not both.
* [ ] No Redundancy: The description key is only present in "Agent-Selected" rules.
* [ ] File Hygiene: The file is UTF-8 with LF line endings and no BOM (the script handles this).
* [ ] Clarity: The body contains concrete examples and @rule
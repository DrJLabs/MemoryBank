---
globs: ["**/.cursor/rules/*.mdc", "**/*.mdc"]
alwaysApply: false
---

# Cursor Rule Optimization & Quality Enhancement Protocol

## INTEGRATION WITH BMAD SYSTEM

This rule **complements** BMAD's automatic rule generation system. Use BMAD's built-in `/Generate Cursor Rules` command for initial rule creation, then use this protocol for optimization.

### BMAD-First Approach:
1. **Create rules**: Use `/Generate Cursor Rules` command in conversation
2. **Let BMAD handle**: Automatic type determination and frontmatter configuration
3. **Then optimize**: Use this rule for consolidation and quality improvements

## RULE OPTIMIZATION TRIGGERS

### When to Apply This Rule:
- Multiple small rules exist for the same concept (e.g., many TypeScript rules)
- Rules have become redundant or conflicting
- Performance optimization needed (too many rules slowing context)
- Rule consolidation requested
- Quality improvements needed for existing rules

### When NOT to Apply:
- Initial rule creation (use BMAD's `/Generate Cursor Rules` instead)
- Simple rule updates (let BMAD handle automatically)

## OPTIMIZATION PATTERNS

### 1. Rule Consolidation
**Problem**: Multiple related rules in same category
**Solution**: Combine into single, comprehensive rule

**Example**: Instead of separate rules for:
- `typescript-imports.mdc`
- `typescript-naming.mdc` 
- `typescript-types.mdc`

Create: `typescript-standards.mdc` with consolidated best practices

### 2. Performance Optimization
**Target**: Reduce rule count while maintaining effectiveness
**Method**: 
- Merge overlapping rules
- Remove redundant patterns
- Consolidate similar globs
- Eliminate rules made obsolete by codebase evolution

### 3. Rule Type Optimization
Following BMAD's rule type system:

#### Agent Selected (description + alwaysApply: false)
- AI decides when to apply
- Best for context-dependent rules
- Use for complex decision-making scenarios

#### Auto Selected (globs + alwaysApply: false)  
- Triggered by file patterns
- Best for file-type specific rules
- Use for consistent patterns across specific file types

#### Always Applied (alwaysApply: true)
- Use sparingly for core project standards
- Best for universal principles
- Avoid overuse (impacts performance)

#### Manual (no description, no globs, alwaysApply: false)
- User explicitly references with @ruleName
- Best for specialized, occasional use rules

## QUALITY ENHANCEMENT CHECKLIST

### Content Quality:
- [ ] **Specific Examples**: Rules include concrete code examples
- [ ] **Clear Language**: Avoid vague guidance like "follow best practices"
- [ ] **Actionable Instructions**: Each rule provides clear actions
- [ ] **Scope Definition**: Clear boundaries on when rule applies
- [ ] **Context Awareness**: Rules consider project-specific needs

### Technical Quality:
- [ ] **Proper Frontmatter**: Follows BMAD's type conventions
- [ ] **Appropriate Triggers**: Right balance of specificity and coverage
- [ ] **No Conflicts**: Rules don't contradict each other
- [ ] **Performance Impact**: Minimal context overhead
- [ ] **Maintainability**: Easy to update as project evolves

### Integration Quality:
- [ ] **BMAD Compatibility**: Works with BMAD's automatic generation
- [ ] **References**: Uses @filename.ext for context inclusion
- [ ] **Categorization**: Proper subfolder organization
- [ ] **Version Control**: Changes tracked and documented

## CONSOLIDATION WORKFLOW

### Step 1: Audit Existing Rules
```bash
# Identify consolidation opportunities
find .cursor/rules -name "*.mdc" -exec basename {} .mdc \; | sort | uniq -c | sort -nr
```

### Step 2: Group Related Rules
- Identify rules with overlapping concerns
- Group by technology, pattern, or domain
- Look for redundant functionality

### Step 3: Create Consolidated Rule
**Use BMAD to generate the consolidated rule:**
```
/Generate Cursor Rules

Please consolidate these existing rules into a single comprehensive rule:
- [List specific rules to consolidate]
- Maintain all important functionality
- Optimize for clarity and performance
- Use appropriate rule type based on usage pattern
```

### Step 4: Test and Validate
- Test consolidated rule with relevant file types
- Verify all original functionality preserved
- Check for performance improvements
- Remove original redundant rules

## PERFORMANCE GUIDELINES

### Rule Count Optimization:
- **Ideal**: 10-20 focused rules per project
- **Maximum**: Avoid exceeding 50 rules total
- **Review Frequency**: Monthly rule audit and consolidation

### Context Size Management:
- Prefer fewer, comprehensive rules over many small ones
- Use file references (@filename) instead of embedding large examples
- Regular pruning of obsolete rules

### Glob Pattern Efficiency:
- Use specific patterns to avoid unnecessary triggering
- Combine similar patterns when possible
- Test pattern matching with representative files

## INTEGRATION WITH MEMORY SYSTEM

### Before Optimizing:
- Search memory for previous optimization decisions
- Check for user preferences on rule organization
- Review past consolidation patterns

### After Optimizing:
- Store successful consolidation patterns
- Document performance improvements achieved
- Record user feedback on rule effectiveness

## BMAD COMPATIBILITY NOTES

### Works With:
- BMAD's automatic rule generation
- `/Generate Cursor Rules` command
- BMAD's rule type system
- Custom agent configurations

### Enhances:
- Rule quality and consistency
- Performance optimization
- Long-term maintainability
- Project-specific customization

@memory-integration.mdc
@auto-memory-workflow.mdc
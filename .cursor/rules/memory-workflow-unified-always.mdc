---
# description: "Memory-First Development Workflow - MANDATORY: Use update_memory for ALL interactions to track progress, document methods, and maintain context"
alwaysApply: true
---

# Memory-First Development Workflow

## ðŸ§  MANDATORY: Advanced Memory Integration

### Before ANY Task: Get Context
Use advanced memory search with confidence scoring:
```bash
ai-get-context "user_query description" [type]
# Or: ai-ctx-tech "technical query" | ai-ctx-pref "preference query"
```

### After ANY Success: Store Insights  
Use smart categorization for automatic organization:
```bash
ai-add-smart "METHOD: [approach] worked for [task]. Insight: [lesson]"
# Auto-categorizes as TECHNICAL, WORKFLOW, PREFERENCE, etc.
```

## Essential Commands (Always Available)

**Context Retrieval** (Use First):
- `ai-get-context "query" [type]` - Rich AI context with relevance scoring
- `ai-ctx-tech|pref|project|workflow "query"` - Quick typed context
- `ai-search "query" [type]` - Multi-strategy intelligent search

**Memory Storage** (Use After):
- `ai-add-smart "text"` - Auto-categorized memory addition
- `ai-categorize "text"` - Enhanced categorization
- `ai-analytics` - System insights and growth patterns

## Mandatory Workflow

1. **Context Check**: `ai-get-context "user_query" [type]`
2. **Execute Task**: Use retrieved context with confidence scores
3. **Store Results**: `ai-add-smart "outcome and insights"`

## Integration Rules

**ALWAYS use before:** Any code generation, debugging, decisions, responses
**ALWAYS use after:** Successful implementations, failed methods, insights

**System**: 22 advanced aliases | Multi-strategy search | Auto-categorization | Related memory discovery

repos:
  # Security scanning hooks
  - repo: https://github.com/PyCQA/bandit
    rev: '1.7.8'
    hooks:
      - id: bandit
        name: Bandit Security Scan
        description: 'Run Bandit security analysis'
        args: ['-c', '.bandit', '-r', '.']
        exclude: ^(tests/|test_|.*_test\.py)
        types: [python]

  - repo: https://github.com/gitguardian/ggshield
    rev: v1.25.0
    hooks:
      - id: ggshield
        name: GitGuardian Security Scan
        description: 'Scan for API keys, tokens, and secrets'
        language: python
        stages: [commit, push]

  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        name: Detect Secrets
        description: 'Detect secrets in codebase'
        args: ['--baseline', '.secrets.baseline']
        exclude: .*/tests/.*

  # Code quality and formatting
  - repo: https://github.com/psf/black
    rev: 24.3.0
    hooks:
      - id: black
        name: Black Code Formatter
        description: 'Format Python code with Black'
        language_version: python3

  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        name: Import Sorting
        description: 'Sort Python imports'

  - repo: https://github.com/charliermarsh/ruff-pre-commit
    rev: v0.3.4
    hooks:
      - id: ruff
        name: Ruff Linting
        description: 'Run Ruff linter'
        args: [--fix, --exit-non-zero-on-fix]

  # Dependency scanning
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check
        name: Safety Dependency Check
        description: 'Check Python dependencies for security vulnerabilities'
        files: requirements.*\.txt$

  # YAML and configuration validation
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.35.1
    hooks:
      - id: yamllint
        name: YAML Linting
        description: 'Lint YAML files'
        args: [-d, relaxed]

  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        name: Trim Trailing Whitespace
        description: 'Remove trailing whitespace'
      - id: end-of-file-fixer
        name: Fix End of Files
        description: 'Ensure files end with newline'
      - id: check-yaml
        name: Check YAML
        description: 'Validate YAML syntax'
      - id: check-json
        name: Check JSON
        description: 'Validate JSON syntax'
      - id: check-toml
        name: Check TOML
        description: 'Validate TOML syntax'
      - id: check-merge-conflict
        name: Check Merge Conflicts
        description: 'Check for merge conflict markers'
      - id: check-case-conflict
        name: Check Case Conflicts
        description: 'Check for case conflicts'
      - id: mixed-line-ending
        name: Mixed Line Ending
        description: 'Replaces mixed line endings'

  # Docker security
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        name: Hadolint Docker Linting
        description: 'Lint Dockerfiles for best practices and security'

  # Commit message validation
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.20.0
    hooks:
      - id: commitizen
        name: Commitizen Check
        description: 'Check commit message format'
        stages: [commit-msg]

# Pre-commit configuration
default_stages: [commit]
fail_fast: false
minimum_pre_commit_version: "3.0.0"

# CI configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false 
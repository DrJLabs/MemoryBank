---
description:
globs:
alwaysApply: false
---
# Infisical Secrets Management Protocol

## CRITICAL: Mandatory Infisical Usage for All Secrets

### When to Use Infisical (MANDATORY)
**ALWAYS use Infisical for ANY secret or environment variable:**
- API keys, tokens, and credentials
- Database connection strings  
- Third-party service credentials
- Environment-specific configurations
- Local development environment variables

### Essential Infisical Commands

#### Authentication & Setup:
```bash
# Initial setup (run once per project)
infisical login                    # Authenticate with Infisical
infisical init                     # Connect project to Infisical

# For CI/CD environments
export INFISICAL_TOKEN=$(infisical login --method=universal-auth --client-id=$CLIENT_ID --client-secret=$CLIENT_SECRET --silent --plain)
```

#### Development Workflow:
```bash
# Start applications with injected secrets
infisical run -- npm run dev       # Node.js/React/Next.js
infisical run -- python app.py     # Python
infisical run -- flask run         # Flask
infisical run -- gradle test       # Gradle

# Export secrets to file when needed
infisical export --format=dotenv-export > .env
infisical secrets generate-example-env > .example-env
```

#### Secret Management:
```bash
# List available secrets
infisical secrets --env=dev --recursive

# Fetch secrets for specific environment
infisical secrets --env=prod --path=/

# Watch for changes (development only)
infisical run --watch -- npm run dev
```

### Project Configuration (.infisical.json)

```json
{
  "workspaceId": "PROJECT_WORKSPACE_ID",
  "defaultEnvironment": "dev",
  "gitBranchToEnvironmentMapping": {
    "main": "prod",
    "staging": "staging", 
    "develop": "dev"
  }
}
```

### Environment Setup

#### Required Environment Variables:
```bash
# For local development
export INFISICAL_DISABLE_UPDATE_CHECK=true  # Improve performance

# For CI/CD pipelines  
export INFISICAL_TOKEN=<machine-identity-token>

# For self-hosted instances
export INFISICAL_API_URL="https://your-infisical-instance.com/api"
```

### Security Best Practices

1. **Never hardcode secrets** - Use Infisical CLI or SDKs
2. **Use environment-specific secrets** (dev/staging/prod)
3. **Authenticate via machine identities** for CI/CD
4. **Use watch mode only in development** environments
5. **Disable update checks in production** for performance

### Integration Rules

#### MUST DO:
- Initialize Infisical in every new project with `infisical init`
- Use `infisical run --` prefix for all development commands
- Configure environment mappings for different Git branches
- Generate `.example-env` files for new team members

#### MUST NOT:
- Store secrets in `.env` files committed to Git
- Use hardcoded credentials in source code
- Skip Infisical initialization in new projects
- Use plain environment variables for sensitive data

### Docker Integration

```dockerfile
# Install Infisical CLI in containers
RUN curl -1sLf 'https://dl.cloudsmith.io/public/infisical/infisical-cli/setup.alpine.sh' | bash \
    && apk add infisical

# Modify start command to inject secrets
CMD ["infisical", "run", "--", "npm", "run", "start"]
```

### Troubleshooting

#### Common Issues:
- **Authentication failures**: Check `INFISICAL_TOKEN` or re-run `infisical login`
- **Missing secrets**: Verify environment with `--env` flag
- **Performance issues**: Set `INFISICAL_DISABLE_UPDATE_CHECK=true`
- **CI/CD failures**: Ensure machine identity has project access

#### Quick Diagnostics:
```bash
# Check authentication status
infisical secrets --env=dev

# Verify project connection
cat .infisical.json

# Test secret injection
infisical run -- printenv | grep -i secret
```

## Rule Enforcement

This rule has `alwaysApply: true` - Infisical integration is MANDATORY for:
- Any development involving secrets or credentials
- Environment variable management
- Local development setup
- CI/CD pipeline configuration
- Production deployments

**Failure to use Infisical for secrets management is considered a critical security violation.**

@infisical-integration
@security-first-development.mdc

version: '3.8'

services:
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    volumes:
      - ../app:/app/app
      - ../migrations:/app/migrations
      - ../alembic.ini:/app/alembic.ini
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ../.env
    environment:
      - POSTGRES_SERVER=db
      - REDIS_HOST=redis

  worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile.worker
    volumes:
      - ../app:/app/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ../.env
    environment:
      - POSTGRES_SERVER=db
      - REDIS_HOST=redis

  db:
    image: postgres:13-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-app}
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:v2.37.0
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - api

  grafana:
    image: grafana/grafana:8.5.2
    ports:
      - "3001:3000" # Mapped to 3001 to avoid conflict with main app UI
    depends_on:
      - prometheus

volumes:
  postgres_data: 